<div class="max-w-4xl mx-auto p-6 bg-base-200 rounded-xl shadow-2xl">
    <h1 class="text-4xl font-bold mb-8 text-center text-primary">View/Edit Client</h1>
    
    <form id="editClientForm" class="space-y-8">
        <div class="bg-base-100 p-8 rounded-lg shadow-lg">
            <h2 class="text-2xl font-semibold mb-6 text-secondary">Client Details</h2>
            <div class="space-y-6">
                <div class="form-control">
                    <label for="client-name" class="label">
                        <span class="label-text text-base">Client Name</span>
                    </label>
                    <input type="text" id="client-name" name="name" required class="input input-bordered w-full focus:input-primary">
                </div>
                <div class="form-control">
                    <label for="client-email" class="label">
                        <span class="label-text text-base">Email</span>
                    </label>
                    <input type="email" id="client-email" name="email" required class="input input-bordered w-full focus:input-primary">
                </div>
                <div class="form-control">
                    <label for="client-phone" class="label">
                        <span class="label-text text-base">Phone</span>
                    </label>
                    <input type="tel" id="client-phone" name="phone" class="input input-bordered w-full focus:input-primary">
                </div>
                <div class="form-control">
                    <label for="client-address" class="label">
                        <span class="label-text text-base">Address</span>
                    </label>
                    <textarea id="client-address" name="address" class="textarea textarea-bordered h-24 focus:textarea-primary"></textarea>
                </div>
                <!-- select the status of the client -->
                <div class="form-control">
                    <label for="client-status" class="label">
                        <span class="label-text text-base">Status</span>
                    </label>
                    <select id="client-status" name="status" class="select select-bordered w-full focus:select-primary">
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="ask for feedback">ask for feedback</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="flex justify-center space-x-4">
            <button type="submit" class="btn btn-primary btn-lg">Update Client</button>
            <button type="button" id="deleteClientBtn" class="btn btn-error btn-lg">Delete Client</button>
        </div>
    </form>
</div>

<script>
    function showModal(title, message, type = 'info') {
        const modal = document.createElement('div');
        modal.innerHTML = `
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white p-8 rounded-lg shadow-xl max-w-md w-full">
                    <h2 class="text-2xl font-bold mb-4 ${type === 'error' ? 'text-red-600' : 'text-success'}">${title}</h2>
                    <p class="mb-6">${message}</p>
                    <button class="text-white btn ${type === 'error' ? 'btn-error' : 'btn-success'} w-full" onclick="this.closest('.fixed').remove();">OK</button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    document.addEventListener('DOMContentLoaded', async () => {
        const clientId = '<%= id %>';
        if (!clientId) {
            showModal('Error', 'No client ID provided', 'error');
            return;
        }

        try {
            const response = await fetch(`/dashboard/clients/view/${clientId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',                         
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });
            if (response.status !== 200) throw new Error('Failed to fetch client data');

            const client = await response.json();
            
            const fields = ['name', 'email', 'phone', 'address', 'status'];
            fields.forEach(field => {
                const element = document.getElementById(`client-${field}`);
                if (element) {
                    element.value = client[field] || '';
                } else {
                    console.warn(`Element with id 'client-${field}' not found`);
                }
            });

            // Handle city and status separately as they're not in the HTML
            // console.log('City:', client.city);
            // console.log('Status:', client.status);
        } catch (error) {
            console.error('Error fetching client data:', error);
            showModal('Error', 'Failed to load client data. Please try again.', 'error');
        }
    });

    document.getElementById('editClientForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const clientId = '<%= id %>';
        const formData = new FormData(e.target);
        const clientData = Object.fromEntries(formData.entries());

        try {
            const response = await fetch(`/dashboard/clients/edit/${clientId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                },
                body: JSON.stringify(clientData)
            });

            if (!response.ok) throw new Error('Failed to update client');
            showModal('Success', 'Client updated successfully');
        } catch (error) {
            console.error('Error updating client:', error);
            showModal('Error', 'Failed to update client. Please try again.', 'error');
        }
    });

    document.getElementById('deleteClientBtn').addEventListener('click', async () => {
        const confirmModal = document.createElement('div');
        confirmModal.innerHTML = `
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white p-8 rounded-lg shadow-xl max-w-md w-full">
                    <h2 class="text-2xl font-bold mb-4 text-red-600">Confirm Deletion</h2>
                    <p class="mb-6">Are you sure you want to delete this client?</p>
                    <div class="flex justify-end space-x-4">
                        <button class="btn btn-ghost" onclick="this.closest('.fixed').remove();">Cancel</button>
                        <button id="confirmDeleteBtn" class="btn btn-error">Delete</button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(confirmModal);

        document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
            const clientId = '<%= id %>';
            try {
                const response = await fetch(`/dashboard/clients/delete/${clientId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                });

                if (!response.ok) throw new Error('Failed to delete client');
                showModal('Success', 'Client deleted successfully');
                setTimeout(() => {
                    window.location.href = '/dashboard/clients';
                }, 2000);
            } catch (error) {
                console.error('Error deleting client:', error);
                showModal('Error', 'Failed to delete client. Please try again.', 'error');
            } finally {
                confirmModal.remove();
            }
        });
    });
</script>